# prop.table( table(data$left) )
xkabledply( prop.table( table(data$left) ), wide = TRUE, title = "prop table: left 0/1" ) # EL
install.packages("kableExtra")
install.packages("kableExtra")
# prop.table( table(data$left) )
xkabledply( prop.table( table(data$left) ), wide = TRUE, title = "prop table: left 0/1" ) # EL
install.packages('xkabledply')
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
library(ezids)
library(ggplot2)
library(prettydoc)
install.packages("ezids")
install.packages("ezids")
install.packages("kableExtra")
remove.packages("kableExtra")
install.packages("ezids")
install.packages("ezids")
install.packages("kableExtra")
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
library(ezids)
library(ggplot2)
library(prettydoc)
library(ezids)
library(ggplot2)
library(prettydoc)
library(ezids)
library(ggplot2)
library(prettydoc)
library(ezids)
library(ggplot2)
library(prettydoc)
devtools::install_github("kupietz/kableExtra")
library(ezids)
library(ggplot2)
library(gridExtra)
library(stringr)
library(corrplot)
library(RColorBrewer)
library(scales)
library(dplyr)
library("car")
library("class")
library("pROC")
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
data_pre<-data.frame(read.csv("loan_approval_dataset.csv"))
data<-data_pre
str(data)
NA_values <- sum(is.na(data))
NA_values
data<- subset(data_pre, select = -c(loan_id))
data$education <- as.factor(data$education)
data$self_employed<-as.factor(data$self_employed)
data$loan_status<-as.factor(data$loan_status)
str(data)
summary(data)
ggplot(data, aes(x = no_of_dependents, fill = factor(no_of_dependents))) +
geom_histogram(binwidth = .05, color = "black", alpha = 0.7) +
labs(
title = "Histogram of Number of Dependents",
x = "Number of Dependents",
y = "Frequency"
)+scale_fill_manual(name = "No. of Dependents",values = c("salmon3", "salmon1", "salmon2","salmon4","red","salmon"))+theme_minimal()
ggplot(data, aes(y = no_of_dependents, x = loan_status, fill = loan_status)) +
geom_boxplot(binwidth = 0.5, color = "black", alpha = 0.9) +
labs(
title = "Box plot of number of dependents and loan status",
x = "Loan Status",
y = "Number of Dependents"
) +
scale_fill_manual(values = c("#93C572", "#4682B4"))+theme_minimal()
ggplot(data, aes(x = education, fill = loan_status)) +
geom_bar(position = "dodge", color = "black", alpha = 0.7) +
labs(
title = "Bar Plot of Education and Loan Status",
x = "Education level of Applicant",
y = "Frequency"
)+scale_fill_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x = commercial_assets_value, fill = loan_status)) +
geom_histogram(binwidth = 500000, position = "identity", alpha = 0.7) +
labs(
title = "Histogram of Commercial Assets Value by Loan Status",
x = "Commercial Assets Value",
y = "Frequency"
)+scale_x_continuous(labels = comma_format(scale = 1e-6,suffix = "M"), breaks = seq(0, 35000000, by = 5000000)) +scale_fill_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
mean_data <- data %>%
group_by(loan_status) %>%
summarise(mean_commercial_assets = mean(commercial_assets_value))
ggplot(mean_data, aes(x = loan_status, y = mean_commercial_assets, color = loan_status)) +
geom_point() +
labs(
title = "Mean Commercial Assets Value by Loan Status",
x = "Loan Status",
y = "Mean Commercial Assets Value",
color = "Loan Status"
)+scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
Approved<-subset(data,data$loan_status==" Approved")
rejected<-subset(data,data$loan_status==" Rejected")
test<-t.test(Approved$no_of_dependents,rejected$no_of_dependents)
c<-table(data$education, data$loan_status)
c_test2<-chisq.test(c)
c_test2
data <- data %>%
mutate(self_employed = str_trim(self_employed))
data <- data %>%
mutate(education = str_trim(education))
data <- data %>%
mutate(loan_status = str_trim(loan_status))
data$education<-as.factor(data$education)
data$self_employed<-as.factor(data$self_employed)
data$loan_status<-as.factor(data$loan_status)
class(data$self_employed)
class(data$luxury_assets_value)
class(data$income_annum)
class(data$loan_status)
str(data)
SE_1 <- table(data$`self_employed`)
SE <- as.data.frame(SE_1)
names(SE)<-c("self_employed","Count")
ggplot(SE, aes(x = self_employed, y = Count, fill = self_employed)) +
geom_bar(stat = "identity") +
labs(title = "Self-employment Distribution",
x = "Self-employment status",
y = "Number of Applicants") +
scale_fill_manual(values = c("Yes" = "#93C572", "No" = "#4682B4", "Other" = "gray")) +
theme_minimal()
data$self_employed <- factor(data$self_employed, levels = c("Yes", "No", "Other"))
ggplot(data, aes(x =loan_status, fill = self_employed)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Stacked Bar between Loan Status and Self Employment",
x = "Loan Status",
y = "Count",
fill = "self_employed") + scale_fill_manual(values = c("Yes" = "#93C572", "No" = "#4682B4", "Other" = "gray")) +
theme_minimal()
ggplot(data, aes(x =loan_status, fill = education)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Stacked Bar between Loan Status and Education Level",
x = "Loan Status",
y = "Count",
fill = "Education Level") + scale_fill_manual(values = c("Graduate" = "#93C572", "Not Graduate" = "#4682B4", "Other" = "gray")) +
theme_minimal()
ggplot(data, aes(x = loan_status, y = income_annum, fill=loan_status)) +
geom_boxplot() +
labs(title = "Box plot between loan status and Annual Income",
x = "Loan Status",
y = "Annual Income")+
scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = loan_status, y = luxury_assets_value, fill=loan_status)) +
geom_boxplot() +
labs(title = "Box plot between loan status and luxury assets value",
x = "Loan Status",
y = "Luxury Assets Value")+
scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+
scale_y_continuous(labels = scales::number_format(scale = 1e-7, suffix = "M"))
a<-subset(data,data$loan_status=="Approved")
r<-subset(data,data$loan_status=="Rejected")
t.test(a$luxury_assets_value,r$luxury_assets_value)
t.test(a$income_annum,r$income_annum)
contingency <- table(data$self_employed, data$loan_status)
xkabledply(contingency)
c_test<-chisq.test(contingency)
c_test
data1 <- data
data1$self_employed <- as.integer(data$self_employed == "Yes")
data1$loan_status <- as.integer(data$loan_status == "Approved")
data1$education <- as.integer(data$education == "Graduate")
x <- cor(data1)
corrplot(x, type = "full", tl.cex = 0.7, method = "color", col = colorRampPalette(brewer.pal(6, "PuOr"))(100))
library(scales)
loan_amounts <- as.numeric(as.character(data$loan_amount))
hist(
loan_amounts,
main = "Loan Amount Distribution",
xlab = "Loan Amount",
ylab = "Frequency",
col = "#93C572",
border = "black",
breaks = seq(0, max(data$loan_amount) + 500000, 500000)
)
scale_x_continuous(labels = comma_format(scale = 1e-7, suffix = "M"))
options(scipen = 999)
library(ggplot2)
ggplot(data, aes(x = loan_term,fill=loan_status)) +
geom_density() +
theme_bw() +
theme() +
labs(
title = "Density plot of Loan Term based on Loan Status",
x = "Loan Term (Years)",
y = "Density of the Applicants"
)+scale_fill_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
library(ggplot2)
ggplot(data, aes(x = loan_term, y = loan_amount)) +
geom_density_2d(color = "#4AAFD5") +
labs(
title = "2D Density Plot: Loan Term vs. Loan Amount",
x = "Loan Term (Months)",
y = "Loan Amount"
) +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = loan_term, y = loan_amount)) +
geom_hex(color = "#4AAFD5", bins = 50) +
labs(
title = "Hexbin Plot: Loan Term vs. Loan Amount",
x = "Loan Term (Years)",
y = "Loan Amount"
) +
theme_minimal()
correlation_result <- cor.test(data$loan_term, data$loan_amount)
cat("Pearson Correlation Coefficient:", correlation_result$estimate, "\n")
cat("p-value:", correlation_result$p.value, "\n")
ggplot(data, aes(x= cibil_score, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of CIBIL Score vs Loan Amount",
x = "CIBIL Score",
y = "Loan Amount") +
scale_color_manual(values = c("#93C572", "#4682B4")) + scale_x_continuous(breaks = seq(min(data$cibil_score), max(data$cibil_score), by = 50))+scale_y_continuous(labels = comma_format(scale = 1e-6,suffix = "M"), breaks = seq(0, 35000000, by = 5000000))
ggplot(data, aes(x= residential_assets_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of Loan Amount vs Resdedential Assets based on Loan Status",
x = "Residential Assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= commercial_assets_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of Loan Amount vs Commercial assets value based on Loan Status ",
x = "Commercial assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= luxury_assets_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of luxury assets value vs Loan Amount",
x = "Luxury Assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= bank_asset_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of bank asset value vs Loan Amount",
x = "bank Assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= income_annum, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of Loan Amount Vs Income Per Annum based on Loan Status",
x = "Income annum",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
Approved<-subset(data,data$loan_status=="Approved")
rejected<-subset(data,data$loan_status=="Rejected")
test<-t.test(Approved$no_of_dependents,rejected$no_of_dependents)
test
c<-table(data$education, data$loan_status)
c
c_test2<-chisq.test(c)
c_test2
ggplot(data, aes(x = loan_status, y = cibil_score, fill=loan_status)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Box plot between loan status and cibil score",
x = "Loan Status",
y = "cibil score")+
scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = self_employed, y = cibil_score, fill=loan_status)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Box plot between loan status and cibil score",
x = "Self Employed",
y = "cibil score")+
scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = education, y=cibil_score, fill=loan_status)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Box plot between education and cibil score",
x = "education",
y = "cibil score")+ scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(y = residential_assets_value, x=loan_status, fill=loan_status)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Box plot between residential assest value and loan status",
x = "residential assest value",
y = "loan status")+
scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+scale_y_continuous(labels = comma_format(scale = 1e-7,suffix = "M"))
ggplot(data, aes(x = cibil_score, fill=loan_status)) +
geom_histogram( bins = 30, color = "black", alpha = 0.7) +
labs(title = "Histogram of CIBIL Score",
x = "CIBIL Score",
y = "Frequency") + scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = loan_status, y = residential_assets_value, fill=loan_status)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Resendential Assets Value vs Loan Status ",
x = "loan_status",
y = " residential_assets_value")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+scale_y_continuous(labels = comma_format(scale = 1e-6,suffix = "M"))
# Histogram of residential_assest_value
ggplot(data, aes(x =residential_assets_value, fill=loan_status )) +
geom_histogram(bins = 30, color = "black", alpha = 0.7) +
labs(title = "Histogram of Residential Asset Value",
x = "Residential Asset Value",
y = "Frequency")+scale_x_continuous(labels = comma_format(scale = 1e-7,suffix = "M")) + scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = loan_status, y=bank_asset_value, fill=loan_status)) +
geom_bar(stat='summary', fun='mean') +
labs(title = "Loan Status Distribution",
x = "Loan Status",
y = "bank asset value") +scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+scale_y_continuous(labels = comma_format(scale = 1e-6,suffix = "M"))
ggplot(data, aes(x = loan_status, y = bank_asset_value, fill=loan_status)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Bank Assets Distribution by Loan Status",
x = "Loan Status",
y = "Bank Assets")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+scale_y_continuous(labels = comma_format(scale = 1e-7,suffix = "M"))
# Histogram of residential_assest_value
ggplot(data, aes(x =bank_asset_value, fill=loan_status )) +
geom_histogram( bins = 30, color = "black", alpha = 0.7) +
labs(title = "Histogram of Bank Asset Value",
x = "Bank Asset Value",
y = "Frequency")+scale_x_continuous(labels = comma_format(scale = 1e-6,suffix = "M"))+  scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = bank_asset_value, fill = loan_status)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Bank Assets grouped by Loan Status",
x = "Bank Assets",
y = "Density")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+scale_x_continuous(labels = comma_format(scale = 1e-7,suffix = "M"))
ggplot(data, aes(x = cibil_score, fill = loan_status)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Cibil Score grouped by Loan Status",
x = "CIBIL Score",
y = "Density")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = residential_assets_value, fill = loan_status)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of residential asset value grouped by Loan Status",
x = "Residential Asset Value",
y = "Density")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
test_cibil<-t.test(Approved$cibil_score,rejected$cibil_score)
test_cibil
test_bank_asset<-t.test(Approved$bank_asset_value,rejected$bank_asset_value)
test_bank_asset
test_residential<-t.test(Approved$residential_assets_value,rejected$residential_assets_value)
test_residential
Approved<-subset(data,data$loan_status=="Approved")
rejected<-subset(data,data$loan_status=="Rejected")
test<-t.test(Approved$no_of_dependents,rejected$no_of_dependents)
c<-table(data$education, data$loan_status)
c_test2<-chisq.test(c)
c_test2
str(data)
library("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(loan_amount~. , data = data, nvmax = 10, nbest = 2, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
summaryRegForward = summary(reg.best10)
# Adjusted R2
car::subsets(reg.best10, statistic="adjr2", legend = FALSE, min.size = 7, main = "Adjusted R^2 Plot")
subsets(reg.best10, statistic="cp", legend = FALSE, min.size = 4, main = "Mallow Cp Plot")
abline(a = 1, b = 1, lty = 3)
library("bestglm")
res.bestglm <- bestglm(Xy = data, family = binomial,
IC = "AIC",
method = "exhaustive")
summary(res.bestglm)
res.bestglm$BestModels
summary(res.bestglm$BestModels)
plot(predict(res.bestglm$BestModel), residuals(res.bestglm$BestModel),
xlab = "Predicted Values", ylab = "Residuals",
main = "Observed vs. Predicted Values")
model<-lm(loan_amount~no_of_dependents+loan_term+income_annum+commercial_assets_value+cibil_score+loan_status,data=data)
summary(model)
ezids::xkabledply(model,title = "Summary of loan amount prediction")
ezids::xkablevif(model)
Logit <- glm(loan_status ~ no_of_dependents + self_employed + income_annum+loan_amount+loan_term+cibil_score+luxury_assets_value+bank_asset_value, data = data, family = "binomial")
summary(Logit)
ezids::xkabledply(Logit, title =" Summary of logistic Regression for loan status")
expcoeff = exp(coef(Logit))
# expcoeff
ezids::xkabledply( as.table(expcoeff), title = "Exponential of coefficients in Logit Reg" )
Logit$fitted.values[1]
# OR
predict(Logit)[1]  # gives you the logit(p) or ln(p/q) value
1/(1+exp(-predict(Logit)[1]))
# OR
predict(Logit, type = "response")[1]
## CIs using profiled log-likelihood
# confint(admitLogit)
ezids::xkabledply( confint(Logit), title = "CIs using profiled log-likelihood" )
## CIs using standard errors
# confint.default(admitLogit)
ezids::xkabledply( confint.default(Logit), title = "CIs using standard errors" )
library("regclass")
# confusion_matrix(admitLogit)
ezids::xkabledply( confusion_matrix(Logit), title = "Confusion matrix from Logit Model" )
library("ResourceSelection") # function hoslem.test( ) for logit model evaluation
admitLogitHoslem = hoslem.test(data$loan_status, fitted(Logit)) # Hosmer and Lemeshow test, a chi-squared test
admitLogitHoslem
# Have not found a good way to display it.
library("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(Logit, type = "response" )
data$prob=prob
h <- roc(loan_status~prob, data=data)
roc_curve=auc(h) # area-under-curve prefer 0.8 or higher.
roc_curve
#plot(h)
plot(h, main = "ROC Curve", col = "blue", lwd = 2)
text(0.8, 0.2, paste("AUC =", round(auc(h), 3)), col = "blue")
# unloadPkg("pROC")
NullLogit <- glm(loan_status ~ 1, data = data, family = "binomial")
mcFadden = 1 - logLik(Logit)/logLik(NullLogit)
mcFadden
table(data$loan_status)
table(data$loan_status)[2] / sum(table(data$loan_status))
# This means that at random, we have an 37% chance of correctly picking
# out a subscribed individual. Let's see if kNN can do any better.
# Let's split the data into a training and a test set.
# Sample 80% of our know data as training and 20% as test.
set.seed(1)
data_train_rows = sample(1:nrow(data),     #<- from 1 to the number of rows in the data set
round(0.8 * nrow(data), 0),  #<- multiply the number of rows by 0.8 and round the decimals
replace = FALSE)       #<- don't replace the numbers
# Let's check to make sure we have 80% of the rows.
length(data_train_rows) / nrow(data)
data_train = data[data_train_rows, ]  #<- select the rows identified in the data train data
data_test = data[-data_train_rows, ]  #<- select the rows that weren't identified in the train data
# Check the number of rows in each set.
nrow(data_train)
nrow(data_test)
data_train$self_employed<-as.numeric(data_train$self_employed)
data_test$self_employed<-as.numeric(data_test$self_employed)
str(data_train)
library("class")
# k-Nearest Neighbor is a randomized algorithm, so make sure to
# use set.seed() to make your results repeatable.
set.seed(1)
bank_18NN = knn(train = data_train[,c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],test =data_test[,c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],cl = data_train[, "loan_status"],k = 19)
str(bank_18NN)
length(bank_18NN)
table(bank_18NN)
library("class")
library("ggplot2")
chooseK = function(k, train_set, val_set, train_class, val_class){
# Build knn with k neighbors considered.
set.seed(1)
class_knn = knn(train = train_set,    #<- training set cases
test = val_set,       #<- test set cases
cl = train_class,     #<- category for classification
k = k) #,                #<- number of neighbors considered
# use.all = TRUE)       #<- control ties between class assignments. If true, all distances equal to the k-th largest are included
tab = table(class_knn, val_class)
# Calculate the accuracy.
accu = sum(tab[row(tab) == col(tab)]) / sum(tab)
cbind(k = k, accuracy = accu)
}
# The sapply() function plugs in several values into our chooseK function.
# function(x)[function] allows you to apply a series of numbers
# to a function without running a for() loop.
knn_different_k = sapply(seq(1, 21, by = 2),  #<- set k to be odd number from 1 to 21
function(x) chooseK(x,
train_set = data_train[, c("no_of_dependents","self_employed" ,"income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],
val_set = data_test[, c("no_of_dependents","self_employed" ,"income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],
train_class = data_train[, "loan_status"],
val_class = data_test[, "loan_status"]))
# Reformat the results to graph the results.
str(knn_different_k)
knn_different_k = data.frame(k = knn_different_k[1,],
accuracy = knn_different_k[2,])
ggplot(knn_different_k,
aes(x = k, y = accuracy)) +
geom_line(color = "orange", size = 1.5) +
geom_point(size = 3) +
labs(title = "accuracy vs k")
library("gmodels")
IRISPREDCross <- CrossTable(data_test[,"loan_status"], bank_18NN, prop.chisq = FALSE)
library("caret")
cm = confusionMatrix(bank_18NN, reference = as.factor(data_test[, "loan_status"]) )
cm$overall
cm$byClass
# Set seed for reproducibility
set.seed(1)
# Create a ROC curve
roc_curve <- roc(ifelse(data_test[, "loan_status"] == "Approved", 1, 0),
as.numeric(bank_18NN == "Approved"))
# Plot the ROC curve
plot(roc_curve, main = "ROC Curve", col = "blue", lwd = 2)
# Add AUC value to the plot
text(0.8, 0.2, paste("AUC =", round(auc(roc_curve), 3)), col = "blue")
# Add a diagonal reference line (random classifier)
abline(a = 0, b = 1, col = "gray", lty = 2)
auc(roc_curve)
